{"version":3,"sources":["TodoItem.js","data.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","className","type","checked","item","completed","onChange","update","id","style","color","textDecoration","text","todosData","App","state","todos","todoData","handleClick","setState","prevState","map","todo","theList","this","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MA0BeA,MAvBf,SAAkBC,GAOd,OACI,yBAAKC,UAAW,aAEhB,2BACAC,KAAK,WACLC,QAASH,EAAMI,KAAKC,UACpBC,SAAU,kBAAMN,EAAMO,OAAOP,EAAMI,KAAKI,OAGxC,uBAAGC,MAAOT,EAAMI,KAAKC,UAdJ,CACbK,MAAO,OACPC,eAAgB,gBAY4B,MAAQX,EAAMI,KAAKQ,QCmB5DC,EAtCG,CACd,CACIL,GAAI,EACJI,KAAM,qBACNP,WAAW,GAEf,CACIG,GAAI,EACJI,KAAM,mBACNP,WAAW,GAEf,CACIG,GAAI,EACJI,KAAM,cACNP,WAAW,GAEf,CACIG,GAAI,EACJI,KAAM,YACNP,WAAW,GAEf,CACIG,GAAI,EACJI,KAAM,mBACNP,WAAW,GAEZ,CACCG,GAAI,GACJI,KAAM,gBACNP,WAAW,GAEf,CACIG,GAAI,GACJI,KAAM,mBACNP,WAAW,ICKJS,E,4MAjCTC,MAAQ,CACNC,MAAMC,G,EAGdC,YAAc,SAACV,GACd,EAAKW,UAAW,SAAAC,GAMf,MAAO,CAAEJ,MALYI,EAAUJ,MAAMK,KAAI,SAAAC,GACxC,OAAKA,EAAKd,KAAKA,EACP,2BAAKc,GAAZ,IAAkBjB,WAAYiB,EAAKjB,YAC3BiB,U,uDAOH,IAAD,OAEAC,EAAUC,KAAKT,MAAMC,MAAMK,KAAI,SAAAjB,GAAI,OAAI,kBAAC,EAAD,CAAUqB,IAAKrB,EAAKI,GAAIJ,KAAMA,EAAMG,OAAQ,EAAKW,iBAE9F,OACE,6BACI,yBAAKjB,UAAU,aACf,wBAAIA,UAAU,OAAd,SACEsB,Q,GA1BQG,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1cb98038.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n\r\nfunction TodoItem(props){\r\n\r\n    const checkedStyle = {\r\n            color: \"grey\",\r\n            textDecoration: \"line-through\"\r\n    }\r\n\r\n    return(\r\n        <div className= 'todo-item'>\r\n\r\n        <input \r\n        type=\"checkbox\"\r\n        checked={props.item.completed}\r\n        onChange={() => props.update(props.item.id)}\r\n        />\r\n\r\n        <p style={props.item.completed ? checkedStyle : null }>{props.item.text}</p>\r\n\r\n        </div>\r\n\r\n        )\r\n\r\n}\r\nexport default TodoItem\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","const todosData = [\r\n    {\r\n        id: 1,\r\n        text: \"Take out the trash\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Grocery shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Clean house\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Call Fred\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 6,\r\n        text: \"got to the store\",\r\n        completed: false\r\n    },\r\n       {\r\n        id: 10,\r\n        text: \"ask about ink\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 11,\r\n        text: \"learn some React\",\r\n        completed: false\r\n    }\r\n]\r\n\r\nexport default todosData","import React from 'react'\nimport TodoItem from './TodoItem'\nimport todoData from './data'\n\nclass App extends React.Component{\n\n      state = {\n        todos:todoData\n      }\n\nhandleClick = (id) => {\n\tthis.setState ( prevState => {\n\t\tconst updatedTodos = prevState.todos.map(todo => {\n\t\t\tif ( todo.id===id ) {\n\t\t\t\treturn { ...todo, completed: !todo.completed }\n\t\t\t} return todo \n\t\t})\n\t\treturn { todos: updatedTodos }\n\t})\n\n}\n\nrender(){\n\n  const theList = this.state.todos.map(item => <TodoItem key={item.id} item={item} update={this.handleClick} /> )\n\n  return(\n    <div>\n        <div className=\"todo-list\">\n        <h1 className=\"tag\">{`<NB/>`}</h1>\n         {theList}\n        </div>\n    </div>\n\n    )\n}\n\n\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}